// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-JBONHM1
// DateTime: 27/11/2018 2:21:59 PM
// UserName: 26035
// Input file <parser.y - 25/05/2018 10:16:08 PM>

// options: conflicts lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using GPLexTutorial.AST;

namespace GPLexTutorial
{
public enum Tokens {
    error=127,EOF=128,IDENT=129,STRING=130,BOOLEANLITERAL=131,Integer_Literal=132,
    Floating_Point_Literal=133,ABSTRACT=134,ASSERT=135,BOOLEAN=136,BREAK=137,BYTE=138,
    CASE=139,CATCH=140,CHAR=141,CLASS=142,CONST=143,CONTINUE=144,
    DEFAULT=145,DO=146,DOUBLE=147,ELSE=148,ENUM=149,EXTENDS=150,
    FINAL=151,FINALLY=152,FLOAT=153,FOR=154,IF=155,GOTO=156,
    IMPLEMENTS=157,IMPORT=158,INSTANCEOF=159,INT=160,INTERFACE=161,LONG=162,
    NATIVE=163,NEW=164,PACKAGE=165,PRIVATE=166,PROTECTED=167,PUBLIC=168,
    RETURN=169,SHORT=170,STATIC=171,STRICTFP=172,SUPER=173,SWITCH=174,
    SYNCHRONIZED=175,THIS=176,THROW=177,THROWS=178,TRANSIENT=179,TRY=180,
    VOID=181,VOLATILE=182,WHILE=183,NULL=184,PR=185,EQUALTO=186,
    GTE=187,LTE=188,NET=189,LA=190,LO=191,INC=192,
    DEC=193,LSO=194,RSO=195,URSO=196,AAA=197,SAA=198,
    MAA=199,DAA=200,MoAA=201,LSAA=202,RSAA=203,BAAA=204,
    BIOAA=205,BEOAA=206,URSOAA=207,AO=208,LTO=209,GTO=210,
    EO=211,TO=212,QO=213,CO=214,BAO=215,BDO=216,
    BMO=217,BD=218,UA=219,UO=220,EXP=221,BM=222,
    OP=223,CP=224,OB=225,CB=226,AOB=227,ACB=228,
    ET=229,VS=230,PO=231,AOF=232,Separator_VariableArguments=233,Separator_DoubleColon=234};

public struct ValueType
#line 5 "parser.y"
{
    public int num;
    public string name;
    public bool boolValue;
    public int Integer_Literal;
    public float FloatingPoint_Literal;

	public CompilationUnit ordinaryCompilationUnit;
	public JavaType javaType;
	public List<Modifier> modifiers;
	public Packagedeclaration packagedeclarationopt;
	public List<ImportDeclaration> importDeclarations;
	public List<TypeDeclaration> typeDeclarations;
	public TypeDeclaration typeDeclaration;
	public List<Declaration> declarations;
    public Declaration declaration;
	public Modifier modifier;
	public List<Parameter> parameters;
    public Parameter parameter;

	public List<Statement> statements;
    public Statement statement;
	public AssignmentExpression assignmentExpression;
	public LiteralExpression literalExpression;
	public NamedExpression namedExpression;
	public ArrayType arrayType;
	public char assignmentOperator;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[50];
  private static State[] states = new State[72];
  private static string[] nonTerms = new string[] {
      "NormalClassDeclaration", "ClassModifiers", "TypeIdentifier", "CompilationUnit", 
      "OrdinaryCompilationUnit", "PackageDeclarationOpt", "ImportDeclarations", 
      "TypeDeclarations", "TypeDeclaration", "IntegralType", "ClassModifier", 
      "MethodModifiers", "MethodModifier", "ClassBodyDeclarations", "ClassBody", 
      "ClassBodyDeclaration", "Result", "Parameters", "Parameter", "MethodDeclaration", 
      "BlockStatements", "BlockStatement", "Block", "LocalVariableDeclaration", 
      "ExpressionStatement", "LiteralExpression", "NamedExpression", "ArrayType", 
      "InnerType", "VariableModifiers", "AssignmentExpression", "AssignmentOperator", 
      "VarName", "Name", "IntegerLiteral", "$accept", "TypeParametersOpt", "SuperclassOpt", 
      "SuperInterfacesOpt", "LocalVariableDeclarationStatement", };

  static Parser() {
    states[0] = new State(-4,new int[]{-4,1,-5,3,-6,4});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-5,new int[]{-7,5});
    states[5] = new State(new int[]{168,71,128,-6,142,-10},new int[]{-8,6,-9,7,-1,9,-2,10,-11,69});
    states[6] = new State(-3);
    states[7] = new State(new int[]{168,71,128,-6,142,-10},new int[]{-8,8,-9,7,-1,9,-2,10,-11,69});
    states[8] = new State(-7);
    states[9] = new State(-8);
    states[10] = new State(new int[]{142,11});
    states[11] = new State(new int[]{129,68},new int[]{-3,12});
    states[12] = new State(-13,new int[]{-37,13});
    states[13] = new State(-14,new int[]{-38,14});
    states[14] = new State(-15,new int[]{-39,15});
    states[15] = new State(new int[]{123,17},new int[]{-15,16});
    states[16] = new State(-9);
    states[17] = new State(new int[]{168,66,171,67,125,-18,181,-22},new int[]{-14,18,-16,20,-20,22,-12,23,-13,64});
    states[18] = new State(new int[]{125,19});
    states[19] = new State(-17);
    states[20] = new State(new int[]{168,66,171,67,125,-18,181,-22},new int[]{-14,21,-16,20,-20,22,-12,23,-13,64});
    states[21] = new State(-19);
    states[22] = new State(-20);
    states[23] = new State(new int[]{181,63},new int[]{-17,24});
    states[24] = new State(new int[]{129,25});
    states[25] = new State(new int[]{40,26});
    states[26] = new State(new int[]{41,-27,129,-30},new int[]{-18,27,-19,54,-30,56});
    states[27] = new State(new int[]{41,28});
    states[28] = new State(new int[]{123,30},new int[]{-23,29});
    states[29] = new State(-21);
    states[30] = new State(new int[]{125,31,160,42,129,53},new int[]{-21,32,-22,34,-40,36,-24,37,-10,39,-25,43,-31,44,-27,46,-34,52});
    states[31] = new State(-33);
    states[32] = new State(new int[]{125,33});
    states[33] = new State(-34);
    states[34] = new State(new int[]{160,42,129,53,125,-35},new int[]{-21,35,-22,34,-40,36,-24,37,-10,39,-25,43,-31,44,-27,46,-34,52});
    states[35] = new State(-36);
    states[36] = new State(-37);
    states[37] = new State(new int[]{59,38});
    states[38] = new State(-39);
    states[39] = new State(new int[]{129,41},new int[]{-33,40});
    states[40] = new State(-40);
    states[41] = new State(-42);
    states[42] = new State(-41);
    states[43] = new State(-38);
    states[44] = new State(new int[]{59,45});
    states[45] = new State(-43);
    states[46] = new State(new int[]{61,51},new int[]{-32,47});
    states[47] = new State(new int[]{132,50},new int[]{-26,48,-35,49});
    states[48] = new State(-44);
    states[49] = new State(-48);
    states[50] = new State(-49);
    states[51] = new State(-47);
    states[52] = new State(-45);
    states[53] = new State(-46);
    states[54] = new State(new int[]{41,-27,129,-30},new int[]{-18,55,-19,54,-30,56});
    states[55] = new State(-28);
    states[56] = new State(new int[]{129,62},new int[]{-28,57,-29,59});
    states[57] = new State(new int[]{129,58});
    states[58] = new State(-29);
    states[59] = new State(new int[]{91,60});
    states[60] = new State(new int[]{93,61});
    states[61] = new State(-31);
    states[62] = new State(-32);
    states[63] = new State(-26);
    states[64] = new State(new int[]{168,66,171,67,181,-22},new int[]{-12,65,-13,64});
    states[65] = new State(-23);
    states[66] = new State(-24);
    states[67] = new State(-25);
    states[68] = new State(-16);
    states[69] = new State(new int[]{168,71,142,-10},new int[]{-2,70,-11,69});
    states[70] = new State(-11);
    states[71] = new State(-12);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-36, new int[]{-4,128});
    rules[2] = new Rule(-4, new int[]{-5});
    rules[3] = new Rule(-5, new int[]{-6,-7,-8});
    rules[4] = new Rule(-6, new int[]{});
    rules[5] = new Rule(-7, new int[]{});
    rules[6] = new Rule(-8, new int[]{});
    rules[7] = new Rule(-8, new int[]{-9,-8});
    rules[8] = new Rule(-9, new int[]{-1});
    rules[9] = new Rule(-1, new int[]{-2,142,-3,-37,-38,-39,-15});
    rules[10] = new Rule(-2, new int[]{});
    rules[11] = new Rule(-2, new int[]{-11,-2});
    rules[12] = new Rule(-11, new int[]{168});
    rules[13] = new Rule(-37, new int[]{});
    rules[14] = new Rule(-38, new int[]{});
    rules[15] = new Rule(-39, new int[]{});
    rules[16] = new Rule(-3, new int[]{129});
    rules[17] = new Rule(-15, new int[]{123,-14,125});
    rules[18] = new Rule(-14, new int[]{});
    rules[19] = new Rule(-14, new int[]{-16,-14});
    rules[20] = new Rule(-16, new int[]{-20});
    rules[21] = new Rule(-20, new int[]{-12,-17,129,40,-18,41,-23});
    rules[22] = new Rule(-12, new int[]{});
    rules[23] = new Rule(-12, new int[]{-13,-12});
    rules[24] = new Rule(-13, new int[]{168});
    rules[25] = new Rule(-13, new int[]{171});
    rules[26] = new Rule(-17, new int[]{181});
    rules[27] = new Rule(-18, new int[]{});
    rules[28] = new Rule(-18, new int[]{-19,-18});
    rules[29] = new Rule(-19, new int[]{-30,-28,129});
    rules[30] = new Rule(-30, new int[]{});
    rules[31] = new Rule(-28, new int[]{-29,91,93});
    rules[32] = new Rule(-29, new int[]{129});
    rules[33] = new Rule(-23, new int[]{123,125});
    rules[34] = new Rule(-23, new int[]{123,-21,125});
    rules[35] = new Rule(-21, new int[]{});
    rules[36] = new Rule(-21, new int[]{-22,-21});
    rules[37] = new Rule(-22, new int[]{-40});
    rules[38] = new Rule(-22, new int[]{-25});
    rules[39] = new Rule(-40, new int[]{-24,59});
    rules[40] = new Rule(-24, new int[]{-10,-33});
    rules[41] = new Rule(-10, new int[]{160});
    rules[42] = new Rule(-33, new int[]{129});
    rules[43] = new Rule(-25, new int[]{-31,59});
    rules[44] = new Rule(-31, new int[]{-27,-32,-26});
    rules[45] = new Rule(-27, new int[]{-34});
    rules[46] = new Rule(-34, new int[]{129});
    rules[47] = new Rule(-32, new int[]{61});
    rules[48] = new Rule(-26, new int[]{-35});
    rules[49] = new Rule(-35, new int[]{132});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> OrdinaryCompilationUnit
#line 90 "parser.y"
                           { CompilationUnit.root = ValueStack[ValueStack.Depth-1].ordinaryCompilationUnit; }
#line default
        break;
      case 3: // OrdinaryCompilationUnit -> PackageDeclarationOpt, ImportDeclarations, 
              //                            TypeDeclarations
#line 95 "parser.y"
                                                               { CurrentSemanticValue.ordinaryCompilationUnit = new CompilationUnit(ValueStack[ValueStack.Depth-3].packagedeclarationopt, ValueStack[ValueStack.Depth-2].importDeclarations, ValueStack[ValueStack.Depth-1].typeDeclarations);}
#line default
        break;
      case 4: // PackageDeclarationOpt -> /* empty */
#line 99 "parser.y"
                            { CurrentSemanticValue.packagedeclarationopt = new AST.Packagedeclaration();}
#line default
        break;
      case 5: // ImportDeclarations -> /* empty */
#line 104 "parser.y"
                               { CurrentSemanticValue.importDeclarations = new List<AST.ImportDeclaration>();}
#line default
        break;
      case 6: // TypeDeclarations -> /* empty */
#line 109 "parser.y"
                            { CurrentSemanticValue.typeDeclarations = new List<AST.TypeDeclaration>();}
#line default
        break;
      case 7: // TypeDeclarations -> TypeDeclaration, TypeDeclarations
#line 110 "parser.y"
                                            { CurrentSemanticValue.typeDeclarations = new List<AST.TypeDeclaration>(); CurrentSemanticValue.typeDeclarations.Add(ValueStack[ValueStack.Depth-2].typeDeclaration);CurrentSemanticValue.typeDeclarations.AddRange(ValueStack[ValueStack.Depth-1].typeDeclarations);}
#line default
        break;
      case 9: // NormalClassDeclaration -> ClassModifiers, CLASS, TypeIdentifier, 
              //                           TypeParametersOpt, SuperclassOpt, 
              //                           SuperInterfacesOpt, ClassBody
#line 119 "parser.y"
                                                                                                     { CurrentSemanticValue.typeDeclaration = new AST.ClassDeclaration(ValueStack[ValueStack.Depth-7].modifiers, ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-1].declarations); }
#line default
        break;
      case 10: // ClassModifiers -> /* empty */
#line 123 "parser.y"
                           { CurrentSemanticValue.modifiers = new List<AST.Modifier>(); }
#line default
        break;
      case 11: // ClassModifiers -> ClassModifier, ClassModifiers
#line 124 "parser.y"
                                        { CurrentSemanticValue.modifiers = new List<AST.Modifier>(); CurrentSemanticValue.modifiers.Add(ValueStack[ValueStack.Depth-2].modifier); CurrentSemanticValue.modifiers.AddRange(ValueStack[ValueStack.Depth-1].modifiers); }
#line default
        break;
      case 12: // ClassModifier -> PUBLIC
#line 128 "parser.y"
                       {CurrentSemanticValue.modifier = Modifier.Public;}
#line default
        break;
      case 16: // TypeIdentifier -> IDENT
#line 148 "parser.y"
                        { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 17: // ClassBody -> '{', ClassBodyDeclarations, '}'
#line 152 "parser.y"
                                    { CurrentSemanticValue.declarations = ValueStack[ValueStack.Depth-2].declarations; }
#line default
        break;
      case 18: // ClassBodyDeclarations -> /* empty */
#line 156 "parser.y"
                            { CurrentSemanticValue.declarations = new List<AST.Declaration>();}
#line default
        break;
      case 19: // ClassBodyDeclarations -> ClassBodyDeclaration, ClassBodyDeclarations
#line 157 "parser.y"
                                                   { CurrentSemanticValue.declarations = new List<AST.Declaration>(); CurrentSemanticValue.declarations.Add(ValueStack[ValueStack.Depth-2].declaration);CurrentSemanticValue.declarations.AddRange(ValueStack[ValueStack.Depth-1].declarations);}
#line default
        break;
      case 21: // MethodDeclaration -> MethodModifiers, Result, IDENT, '(', Parameters, ')', 
               //                      Block
#line 167 "parser.y"
                                                           { CurrentSemanticValue.declaration = new MethodDeclaration(ValueStack[ValueStack.Depth-7].modifiers, ValueStack[ValueStack.Depth-6].javaType, ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-3].parameters, ValueStack[ValueStack.Depth-1].statements);}
#line default
        break;
      case 22: // MethodModifiers -> /* empty */
#line 171 "parser.y"
                            { CurrentSemanticValue.modifiers = new List<AST.Modifier>(); }
#line default
        break;
      case 23: // MethodModifiers -> MethodModifier, MethodModifiers
#line 172 "parser.y"
                                          { CurrentSemanticValue.modifiers = new List<AST.Modifier>(); CurrentSemanticValue.modifiers.Add(ValueStack[ValueStack.Depth-2].modifier); CurrentSemanticValue.modifiers.AddRange(ValueStack[ValueStack.Depth-1].modifiers); }
#line default
        break;
      case 24: // MethodModifier -> PUBLIC
#line 176 "parser.y"
                        {CurrentSemanticValue.modifier = Modifier.Public;}
#line default
        break;
      case 25: // MethodModifier -> STATIC
#line 177 "parser.y"
                        {CurrentSemanticValue.modifier = Modifier.Static;}
#line default
        break;
      case 26: // Result -> VOID
#line 182 "parser.y"
                        {CurrentSemanticValue.javaType = JavaType.Void;}
#line default
        break;
      case 27: // Parameters -> /* empty */
#line 188 "parser.y"
                                { CurrentSemanticValue.parameters = new List<AST.Parameter>(); }
#line default
        break;
      case 28: // Parameters -> Parameter, Parameters
#line 189 "parser.y"
                                   { CurrentSemanticValue.parameters = new List<AST.Parameter>(); CurrentSemanticValue.parameters.Add(ValueStack[ValueStack.Depth-2].parameter); CurrentSemanticValue.parameters.AddRange(ValueStack[ValueStack.Depth-1].parameters); }
#line default
        break;
      case 29: // Parameter -> VariableModifiers, ArrayType, IDENT
#line 193 "parser.y"
                                            { CurrentSemanticValue.parameter = new Parameter(ValueStack[ValueStack.Depth-3].modifiers, ValueStack[ValueStack.Depth-2].arrayType, ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 30: // VariableModifiers -> /* empty */
#line 197 "parser.y"
                             { CurrentSemanticValue.modifiers = new List<AST.Modifier>(); }
#line default
        break;
      case 31: // ArrayType -> InnerType, '[', ']'
#line 204 "parser.y"
                                   { CurrentSemanticValue.arrayType =  new ArrayType(ValueStack[ValueStack.Depth-3].javaType); }
#line default
        break;
      case 32: // InnerType -> IDENT
#line 208 "parser.y"
                        { CurrentSemanticValue.javaType = new NamedType(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 33: // Block -> '{', '}'
#line 212 "parser.y"
                         { CurrentSemanticValue.statements = new List<AST.Statement>(); }
#line default
        break;
      case 34: // Block -> '{', BlockStatements, '}'
#line 213 "parser.y"
                                     { CurrentSemanticValue.statements = ValueStack[ValueStack.Depth-2].statements; }
#line default
        break;
      case 35: // BlockStatements -> /* empty */
#line 217 "parser.y"
                            { CurrentSemanticValue.statements = new List<AST.Statement>(); }
#line default
        break;
      case 36: // BlockStatements -> BlockStatement, BlockStatements
#line 218 "parser.y"
                                          { CurrentSemanticValue.statements = new List<AST.Statement>(); CurrentSemanticValue.statements.Add(ValueStack[ValueStack.Depth-2].statement); CurrentSemanticValue.statements.AddRange(ValueStack[ValueStack.Depth-1].statements); }
#line default
        break;
      case 40: // LocalVariableDeclaration -> IntegralType, VarName
#line 232 "parser.y"
                                  { CurrentSemanticValue.statement = new  LocalVariableDeclarationStatement(new List<Modifier>(), ValueStack[ValueStack.Depth-2].javaType, ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 41: // IntegralType -> INT
#line 236 "parser.y"
                     { CurrentSemanticValue.javaType = JavaType.Int; }
#line default
        break;
      case 42: // VarName -> IDENT
#line 241 "parser.y"
                       { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 43: // ExpressionStatement -> AssignmentExpression, ';'
#line 245 "parser.y"
                                        { CurrentSemanticValue.statement = new ExpressionStatement(ValueStack[ValueStack.Depth-2].assignmentExpression);}
#line default
        break;
      case 44: // AssignmentExpression -> NamedExpression, AssignmentOperator, LiteralExpression
#line 250 "parser.y"
                                                             { CurrentSemanticValue.assignmentExpression = new AssignmentExpression(ValueStack[ValueStack.Depth-3].namedExpression, ValueStack[ValueStack.Depth-2].assignmentOperator, ValueStack[ValueStack.Depth-1].literalExpression); }
#line default
        break;
      case 45: // NamedExpression -> Name
#line 254 "parser.y"
                      { CurrentSemanticValue.namedExpression = new NamedExpression(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 46: // Name -> IDENT
#line 258 "parser.y"
                             { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 47: // AssignmentOperator -> '='
#line 262 "parser.y"
       { CurrentSemanticValue.assignmentOperator = '='; }
#line default
        break;
      case 48: // LiteralExpression -> IntegerLiteral
#line 266 "parser.y"
                             { CurrentSemanticValue.literalExpression = new LiteralExpression(ValueStack[ValueStack.Depth-1].Integer_Literal); }
#line default
        break;
      case 49: // IntegerLiteral -> Integer_Literal
#line 270 "parser.y"
                              { CurrentSemanticValue.Integer_Literal = ValueStack[ValueStack.Depth-1].Integer_Literal; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 275 "parser.y"
public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
